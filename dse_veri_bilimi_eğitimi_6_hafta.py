# -*- coding: utf-8 -*-
"""DSE_Veri_Bilimi_Eğitimi_6_Hafta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v8KuU-gii-RMT_wPzIZJtklwzfbvs81c

# Hatalar 

*   Programcı Hataları (Error)
*   Program Kusurları (Bug)
*   İstisnalar (Exception)
"""

try {
    string a="Fethi";
    a/2;
}
catch(Exception ex) {
    
}

try:
  sayi = int(input("Sayı girin"))
except ValueError:
  print("Value Error hatası oluştu")

int a = 2;
a = 2

print(2/0)

sayi = int(input("Sayı girin"))

print(sayi/2)





a = 2
string(a)

# error lara bir örnek, SyntaxError.

print "Hello World!"

print(2/0)

#bug lara bir örnek.


sayi1 = int(input("1. sayıyı giriniz: "))
sayi2 = input("2. sayıyı giriniz: ")

print(sayi1, "+", sayi2, "=", sayi1 + sayi2)

#exception lara bir diğer örnek, ValueError.

sayi3 = int(input("İlk sayı: "))
sayi4 = int(input("İkinci sayı: "))

print(sayi3, "/",sayi4, "=", sayi3/sayi4)

#exception lara bir örnek, ZeroDivisionError.


sayi3 = int(input("İlk sayı: "))
sayi4 = int(input("İkinci sayı: "))

print(sayi3, "/",sayi4, "=", sayi3/sayi4)

"""##Hata Yakalama


try:


> hata alabileceğimiz kısımlar.

except <Hata Adı>:


> hata durumunda yapılacak işlem.




"""

x = "Alan Turing"

int(x)

x="Fethi"

try:
  int(x)
except ValueError:
  print("Lütfen integer bir değer giriniz!!!")

sayi3 = input("İlk sayı: ")
sayi4 = input("İkinci sayı: ")

try:
  sayi3_int = int(sayi3)
  sayi4_int = int(sayi4)

  print(sayi3_int, "/",sayi4_int, "=", sayi3_int/sayi4_int)

except:
  print("Lütfen sayıları düzgün girin!!!")

sayi3 = input("İlk sayı: ")
sayi4 = input("İkinci sayı: ")

try:
  sayi3_int = int(sayi3)
  sayi4_int = int(sayi4)

  print(sayi3_int, "/",sayi4_int, "=", sayi3_int/sayi4_int)

except ZeroDivisionError:
  print("Lütfen 2. girdinizi 0 dan farklı bir integer değer giriniz!!!")

sayi3 = input("İlk sayı: ")
sayi4 = input("İkinci sayı: ")

try:
  sayi3_int = int(sayi3)
  sayi4_int = int(sayi4)

  print(sayi3_int, "/",sayi4_int, "=", sayi3_int/sayi4_int)

except ValueError:
  print("Lütfen integer bir değer giriniz!!!")
except ZeroDivisionError:
  print("Bölen sayıyı 0 dan farklı bir integer değer giriniz!!!")
except:
  print("Bilinmeyen bir hata oluştu...")

print(2/0)

sayi3 = input("İlk sayı: ")
sayi4 = input("İkinci sayı: ")

try:
  sayi3_int = int(sayi3)
  sayi4_int = int(sayi4)

  print(sayi3_int, "/",sayi4_int, "=", sayi3_int/sayi4_int )

except (ValueError, ZeroDivisionError):
  print("Bir hata oluştu!!!")

#try/except/as


sayi3 = input("İlk sayı: ")
sayi4 = input("İkinci sayı: ")

try:
  sayi3_int = int(sayi3)
  sayi4_int = int(sayi4)

  print(sayi3_int, "/",sayi4_int, "=", sayi3_int/sayi4_int)

#AS MESAJ DENDİĞİ ZAMAN İLGİLİ HATANIN MESAJINI TUTAR
except (ValueError,ZeroDivisionError) as mesaj:
  print("Bir hata var!!!")
  print("Hata mesajı: ", mesaj)
except e:
  print("Hata mesajı: ", str(e))

#try/except/as


sayi3 = input("İlk sayı: ")
sayi4 = input("İkinci sayı: ")

try:
  sayi3_int = int(sayi3)
  sayi4_int = int(sayi4)

  print(sayi3_int, "/",sayi4_int, "=", sayi3_int/sayi4_int)

#AS MESAJ DENDİĞİ ZAMAN İLGİLİ HATANIN MESAJINI TUTAR
except Exception as e:
  print("Hata mesajı: ", e)

#döngü yapılarında hata yakalama

while True:
    sayi1 = input("Birinci sayı: (Programdan çıkmak için q tuşuna basın): ")

    if sayi1 == "q":
        break

    sayi2 = input("İkinci sayı: ")

    try:
        sayi1_int = int(sayi1)
        sayi2_int = int(sayi2)
        print(sayi1_int, "/", sayi2_int, "=", sayi1_int / sayi2_int)
    except (ValueError, ZeroDivisionError) as mesaj:
        print("Bir hata oluştu!")
        print("Lütfen tekrar deneyin! Hata:",mesaj)
        break

def terscevir(s):
    if (type(s) != str):
        raise TypeError("Parametrenin tipi hatalı")
    else:
        return s[::-1]

"""
fonksiyonlarda hata yakalama
kendi yazdığımız fonksiyonlar içine "raise" komutu ile duruma özel hata 
mesajları yayımlayabiliyoruz.
"""



try:
  terscevir(1)
except (ValueError, TypeError) as mesaj:
  print("Hata oluştu! Hata:", mesaj)

terscevir("fethi")

terscevir(1)

"""# Nesne Tabanlı Programlama (OOP)
Classmethod
staticmethod c c

Çevremizde gördüğümüz her varlık birer nesne(object) tanımına girer.
Her nesnenin de kendine ait özellikleri (attribute) ve yaptıkları bir takım işlevler(method) vardır.

Sınıf dediğimiz kavram da, nesneleri üretmemizi sağlayan veri tipleridir.


"""

Kedi
-Renk
-Ayak Sayısı
-Cinsiyetidir
-Kilo
-Boy
-Yaş

Araba
 -Renk
 -Marka
 -Kapi
 -LPG



public class Hayvan {

}

constructor - yapıcı

class Hayvan():
  
  #constructor metot
  def __init__(self,isim,renk,ses,boy,kilo,cinsiyet,yas):
    self.renk=renk
    self.ses=ses
    self.boy=boy
    self.kilo=kilo
    self.cinsiyet=cinsiyet
    self.yas=yas

Husnu = Hayvan("Hüsnü","kahverengi","Miyav",30,6,"erkek",0.5)

Pamuk = Hayvan("Pamuk","siyah/beyaz","Miyav",20,5,"dişi",0.4)

Husnu.renk

Pamuk.renk

Pamuk.ses

Husnu.ses

Karabas = Hayvan("gri","Hav hav",100,20,"erkek",2)

Karabas.ses

dir(Karabas)

class Hayvan():
  
  #constructor metot
  def __init__(self,isim,renk,ses,boy,kilo,cinsiyet,yas):
    print("Superin initine girdi")
    self.isim=isim
    self.renk=renk
    self.ses=ses
    self.boy=boy
    self.kilo=kilo
    self.cinsiyet=cinsiyet
    self.yas=yas

  def Bilgilendir(self):
    return f"İsim: {self.isim}, Renk: {self.renk}, Ses: {self.ses}, Boy: {self.boy}, Kilo: {self.kilo}, Cinsiyet: {self.cinsiyet}, Yas: {self.yas} "

class Kedi(Hayvan):
  def __init__(self,isim,renk,boy,kilo,cinsiyet,yas):
    super().__init__(isim,renk,"Miyav",boy,kilo,cinsiyet,yas)

  def func(self):

Husnu = Kedi("Hüsnü","kahverengi",40,6,"erkek",0.5)

Husnu.Bilgilendir()

Pamuk = Kedi("Pamuk","siyah/beyaz",20,5,"dişi",0.4)

Pamuk.ses

Karabas = Hayvan("Karabaş","gri","Hav hav",20,10,"dişi",1)

Pamuk.Bilgilendir()





#constructor / yapıcı
#sınıf içersisinde sadece metod ve değişkenler olabilir
#sınıf içerisindeki metodlar alsında sınıfın yapmıuş olduğu aksiyonlardır
#sınıf içerisindeki değişkenler ise aslında sınıfın özellikleridir

class Hayvan():
  def __init__(self,ses,ayak): #constructor 2 tane _    
    self.voice=ses
    self.legs=ayak
  def Yazdir(self):
    print("Ses:",self.voice," Ayak:",self.legs)

tavuk=Hayvan("Gıdak",2)
tavuk.Yazdir()

kedi=Hayvan("Miyav",4)
kedi.Yazdir()

"""

self= Tanımlanan sınıfta yer alan herhangi bir değişkene veya 
diğer method’lara erişmek için self kelimesini kullanıyoruz. 

"""



class Person():
  def __init__(self, personName, personAge):
    self.name = personName
    self.age = personAge


  def welcomePerson(self):
    print("Merhaba " + self.name)

  
  def showAge(self):
    print(self.age)

fethi=Person("Fethi",24)
fethi.welcomePerson()
fethi.showAge()

person1 = Person ("Fethi", 28)

person1.welcomePerson()

person1.showAge()

class Hayvan():
  def __init__(self,ses,ayak,renkler):
    self.ses=ses
    self.ayak=ayak
    self.renkler=renkler
  
  def Yazdir(self):
    print("Ses:",self.ses," Ayak:",self.ayak," Renkler:",self.renkler)
  
  def RenkEkle(self,renkler):
    self.renkler.extend(renkler)
    self.renkler=list(set(self.renkler))

kedi=Hayvan("Miyav",4,["Siyah","Beyaz","Gri"])
kedi.Yazdir()
kedi.RenkEkle(["Turuncu","Siyah","Mavi"])
kedi.Yazdir()
kedi.RenkEkle(["Sarı"])
kedi.Yazdir()
"""
hataliKedi=Hayvan("Havhav",7,("Siyah","Beyaz"))
hataliKedi.RenkEkle(("Mavi","Yeşil"))
"""

liste=[1,2,3]
liste2=[4,5,6]

siyah gri

mavi gri pembe

siyah gri mavi gri pembe

siyah,gri,mavi,pembe

liste.extend(liste2)
liste

class Hayvan2():
  isim = input("İsmini giriniz ")
  ses= input("nasıl ses çıkardığını giriniz ")
  ayak_sayısı = int(input("Ayak sayısını giriniz "))

kullanıcıSes=input("ses gir:")
ayak=int(input("ayak sayısı gir:"))
renkler=input("renkleri gir aralarında boşluk olsun:")
print(renkler.split())
yeniHayvan=Hayvan(kullanıcıSes,ayak,renkler.split())
yeniHayvan.Yazdir()

class Person3():
  def __init__(self, name, age):
    self.name = name
    self.age = age
    self.language = []
 
  def welcomePerson(self):
    print("Merhaba " + self.name)
  
  def showAge(self):
    print(self.age)

  def addLang (self, new_lang):
    print("Yeni dil ekleniyor..")
    self.language.append(new_lang)

  
  def showInfo(self):
    print("{} adlı kişinin yaşı {} ve bildiği diller: ".format(self.name,self.age))
    for i in self.language:
      print(i)

person3 = Person3("Fethi",24)

person3.welcomePerson()

person3.showAge()

person3.addLang("german")

person3.showInfo()

person3.addLang("english")

person3.showInfo()

person3.addLang(["Turkish","Spanish"])

# Sınıf içerisinde kullanılabiliecek metod tipleri

# standart bir metod
# classmethod
# staticmethod

class Math():

  @staticmethod
  def Topla(s1,s2):
    return s1+s2

def Topla(s1,s2):
  return s1+s2

m = Math()
m.Topla(2,3)

class Person():
  def __init__(self,isim,yas,renk):
    self.isim=isim
    self.yas=yas
    self.taraf = self.TarafYerlestir()
    self.renk=renk
    

  #annotation
  @classmethod
  def TarafYerlestir(cls):
    if cls is LightSide:
      return "Light Side"
    elif cls is DarkSide:
      return "Dark Side"

class LightSide(Person):
  def __init__(self,isim,yas,renk):
    super().__init__(isim,yas,renk)

  @classmethod
  def ClassIsmiGetir(cls):
    return cls

class DarkSide(Person):
  def __init__(self,isim,yas,renk):
    super().__init__(isim,yas,renk)

  @classmethod
  def ClsGucDegistir(cls,guc):
    cls.ozelGuc = guc

  @classmethod
  def ClsGucGetir(cls):
    return cls.ozelGuc

  @classmethod
  def ClassIsmiGetir(cls):
    return cls

darth_maul = DarkSide("Darth Maul",29,"Kırmızı")
obi_wan = LightSide("Obi-Wan Kenobi",24,"Mavi")

obi_wan.taraf

darth_maul.ClassIsmiGetir()

darth_maul.ClsGucDegistir("Elektrik Atma")

darth_maul.ClsGucGetir()

count_dooku = DarkSide("Count Dooku",60,"Kırmızı")

count_dooku.ClsGucGetir()

yoda = LightSide("Yoda",500,"Yeşil")

yoda.taraf

